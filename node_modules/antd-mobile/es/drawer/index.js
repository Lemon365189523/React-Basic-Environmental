import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
var __rest = this && this.__rest || function (s, e) {
    var t = {};
    for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
    }return t;
};
import React from 'react';
import { Platform } from 'react-native';
import DrawerLayout from 'react-native-drawer-layout';

var Drawer = function (_React$Component) {
    _inherits(Drawer, _React$Component);

    function Drawer() {
        _classCallCheck(this, Drawer);

        return _possibleConstructorReturn(this, (Drawer.__proto__ || Object.getPrototypeOf(Drawer)).apply(this, arguments));
    }

    _createClass(Drawer, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _a = this.props,
                children = _a.children,
                sidebar = _a.sidebar,
                _a$onOpenChange = _a.onOpenChange,
                onOpenChange = _a$onOpenChange === undefined ? function (_x) {} : _a$onOpenChange,
                position = _a.position,
                restProps = __rest(_a, ["children", "sidebar", "onOpenChange", "position"]);
            if (Platform.OS === 'android') {
                position = DrawerLayout.positions.Left;
                if (position === 'right') {
                    position = DrawerLayout.positions.Right;
                }
            }
            return React.createElement(
                DrawerLayout,
                _extends({ ref: function ref(drawer) {
                        return _this2.drawer = drawer;
                    }, renderNavigationView: function renderNavigationView() {
                        return sidebar;
                    }, drawerPosition: position, onDrawerOpen: function onDrawerOpen() {
                        return onOpenChange(true);
                    }, onDrawerClose: function onDrawerClose() {
                        return onOpenChange(false);
                    } }, restProps),
                children
            );
        }
    }]);

    return Drawer;
}(React.Component);

export default Drawer;

Drawer.defaultProps = {
    position: 'left',
    drawerWidth: 300
};